import json
import time
from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
import logging



class DouYu:
    def __init__(self):

        self.start_url = None
        self.title = None
        self.file = None
        self.driver = None
        self.barrage_list = []
        
        

    def get_barrage_info(self, barrage):
        all_barrage = barrage.split('\n')
        print("正在截取第"+all_barrage[0]+"的弹幕\n")
        for i in range(len(all_barrage)):
            if i % 3 == 2:
                try:
                    self.barrage_list.append(all_barrage[i - 2]+"&&&"+all_barrage[i - 1]+'\n')
                except:
                    print("一条弹幕截取未成功")

    def run(self):
        self.start_url =  input("请输入斗鱼视频的网址：")        
        self.driver = webdriver.Chrome('I:\selenium_path\chromedriver')
        self.driver.get(self.start_url)
        self.title = self.driver.find_element_by_class_name('video-title').text.split('\n')
        barrage_element = self.driver.find_element_by_xpath(u"(.//*[normalize-space(text()) and normalize-space(.)='推荐视频'])[1]/following::div[1]")
        barrage_element.click()
        time.sleep(2)
        actions = ActionChains(self.driver)
        dragger = self.driver.find_element_by_id('mCSB_3_dragger_vertical')
        actions.move_to_element_with_offset(dragger, 0, 30)
        actions.perform() 
        previous_barrageCont_text = None
        barrageCont_text = None
        while True:
            barrageCont = self.driver.find_element_by_id('barrageCont')
            barrageCont_text = barrageCont.text
            if barrageCont_text == previous_barrageCont_text:
                break
            self.get_barrage_info(barrageCont_text)
            previous_barrageCont_text = barrageCont_text
            actions.click()
            actions.perform()
        self.file = open(str(self.title[0]) + " 弹幕.txt", 'w')
        self.barrage_list = list(dict.fromkeys(self.barrage_list))
        for i in self.barrage_list:
            try:
                self.file.write(i)
            except:
                print("一条弹幕截取未成功")
        print("完成")
        self.file.close()
        self.driver.quit()



class DouYu_barrage_generate:
    
    def __init__(self):
        self.barrage_list = []
        self.barrage_default = ['\ufeff[Script Info]\n', '; Script generated by Aegisub 3.2.2\n', '; http://www.aegisub.org/\n', 'Synch Point: 1\n', 'ScriptType: v4.00+\n', 'PlayResX: 0\n', 'PlayResY: 0\n', 'WrapStyle: 0\n', 'ScaledBorderAndShadow: no\n', '\n', '[Aegisub Project Garbage]\n', 'Last Style Storage: Default\n', 'Video Zoom Percent: 0.875000\n', 'Active Line: 6\n', 'Video Position: 352\n', '\n', '[V4+ Styles]\n', 'Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n', 'Style: Default,微软雅黑,8,&H00FFFFFF,&HF0000000,&H00000000,&H32000000,0,0,0,0,100,100,0,0,1,2,1,2,5,5,2,134\n', '\n', '[Events]\n', 'Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n'] 
        
        self.barrage_positions = [(186.0, 15.0), (83.0, 15.0), (289.0, 15.0),\
                                  (186.0, 30.0), (83.0, 30.0), (289.0, 30.0),\
                                  (186.0, 45.0), (83.0, 45.0), (289.0, 45.0),\
                                  (186.0, 60.0), (83.0, 60.0), (289.0, 60.0)]

        self.barrage_gates     = [1]*12
        self.barrage_time      = [None]*12

    def load_barrage(self, filename):
        f = open(filename+".txt", mode='r')
        for line in f.readlines():
            line = line.strip()
            each_barrage = line.split("&&&")
            self.barrage_list.append(each_barrage)
        def take_first(elem):
            parts = elem[0].split(':')
            return int(parts[0])       
        self.barrage_list.reverse()
        self.barrage_list.sort(key = take_first)  
        f.close()
        
        
    def generate_each_barrage(self, barrage):
        index = None
        try:
            index = self.barrage_gates.index(1)
        except:
            index = self.barrage_time.index(min(self.barrage_time))
        position = self.barrage_positions[index]
        self.barrage_gates[index] = 0
        barrage_time_part = barrage[0].split(':')
        hour = 0
        minute = int(barrage_time_part[0])
        second = int(barrage_time_part[1])
        if minute // 60 != 0:
            hour = minute // 60
            minute = minute % 60
        barrage_start_time = str(hour)+":"+str(minute)+":"+str(second)+".00"
        barrage_end_time = str(hour)+":"+str(minute)+":"+str(second+5)+".00"
        barrage_position = "{\pos("+str(position[0])+","+str(position[1])+")}"
        barrage_content = barrage[1]
        final_barrage = "Dialogue: 0,"+str(barrage_start_time)+","+str(barrage_end_time)+\
            ",*Default,NTP,0,0,0,,"+str(barrage_position)+str(barrage_content)+"\n"
        count_time_as_second = hour*3600 + minute*60 + second
        self.barrage_time[index] = count_time_as_second
        for i in range(len(self.barrage_time)):
            if self.barrage_time[i]!=None and count_time_as_second >= self.barrage_time[i] + 5:
                self.barrage_time[i] = None
                self.barrage_gates[i] = 1
        print(final_barrage)
        return final_barrage
        
        
    def generate_barrage(self, filename):
     
        f = open(filename+".ass", mode='w',encoding='UTF-8')
        f.writelines(self.barrage_default)
        for barrage in self.barrage_list:
            f.write(self.generate_each_barrage(barrage))
        f.close()
            
        
    def run(self, filename):
        self.load_barrage(filename)
        self.generate_barrage(filename)     
        print("完成")

if __name__=='__main__':
    #douyu = DouYu()
    #douyu.run()    
    douYu_barrage_generate = DouYu_barrage_generate()
    douYu_barrage_generate.run("魔兽世界怀旧服，你没有玩过的船新版本！ 2019-05-21 13点场 弹幕") 